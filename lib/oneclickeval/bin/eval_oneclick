#!/usr/bin/env python
# -*- coding: utf-8 -*-

from oneclickeval import OneClickMeasure
from oneclickeval import IUnit, IUnitMatch, IUnitSet, XString

if __name__ == '__main__':
    import optparse
    parser = optparse.OptionParser(usage="usage: %prog [options]")
    parser.add_option("--iunit", dest="iunit_filename", help="iUnit filename")
    parser.add_option("--mat", dest="match_filename", help="Match filename")
    parser.add_option("--maxlen", dest="maxlen", type="int", help="maximum length of X-strings")
    parser.add_option("--l", dest="l", type="int", help="parameter of S-measure")
    parser.add_option("--beta", dest="beta", type="int", help="parameter of S#-measure")
    (opts, args) = parser.parse_args()
    if not all([opts.iunit_filename, opts.maxlen, opts.l]):
      parser.error('need parameters --iunit --mat --maxlen --l --beta')

    all_iunits = IUnitSet.read(opts.iunit_filename)
    xstring = XString.read(opts.match_filename)

    for qid in all_iunits.qids():
      iunits = all_iunits.get(qid)
      pmo = all_iunits.pseudo_minimal_output(qid, opts.l, opts.maxlen)
      matches = xstring.get(qid)

      num_iunits = len(iunits)
      num_matches = len(matches)
      syslen = xstring.len(qid)
      recall = OneClickMeasure.recall(iunits, matches)
      wrecall = OneClickMeasure.wrecall(iunits, matches)
      smeasure = OneClickMeasure.smeasure(iunits, pmo, matches, opts.l)
      sflat = OneClickMeasure.sflat(iunits, pmo, matches, opts.l)
      tmeasure = OneClickMeasure.tmeasure(iunits, matches, syslen)
      tflat = OneClickMeasure.tflat(iunits, matches, syslen)
      ssharp = OneClickMeasure.ssharp(iunits, pmo, matches, opts.l, syslen, opts.beta)
      
      print "%s\tiUnits\t%s" % (qid, num_iunits)
      print "%s\tMatches\t%s" % (qid, num_matches)
      print "%s\tSyslen\t%s" % (qid, syslen)
      print "%s\tRecall\t%s" % (qid, recall)
      print "%s\tWRecall\t%s" % (qid, wrecall)
      print "%s\tS\t%s" % (qid, smeasure)
      print "%s\tSFlat\t%s" % (qid, sflat)
      print "%s\tT\t%s" % (qid, tmeasure)
      print "%s\tTFlat\t%s" % (qid, tflat)
      print "%s\tSSharp\t%s" % (qid, ssharp)

